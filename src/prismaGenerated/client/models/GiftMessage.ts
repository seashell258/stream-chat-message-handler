
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `GiftMessage` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model GiftMessage
 * 
 */
export type GiftMessageModel = runtime.Types.Result.DefaultSelection<Prisma.$GiftMessagePayload>

export type AggregateGiftMessage = {
  _count: GiftMessageCountAggregateOutputType | null
  _avg: GiftMessageAvgAggregateOutputType | null
  _sum: GiftMessageSumAggregateOutputType | null
  _min: GiftMessageMinAggregateOutputType | null
  _max: GiftMessageMaxAggregateOutputType | null
}

export type GiftMessageAvgAggregateOutputType = {
  id: number | null
  userId: number | null
  roomId: number | null
}

export type GiftMessageSumAggregateOutputType = {
  id: number | null
  userId: number | null
  roomId: number | null
}

export type GiftMessageMinAggregateOutputType = {
  id: number | null
  userId: number | null
  roomId: number | null
  content: string | null
  giftType: string | null
  createdAt: Date | null
}

export type GiftMessageMaxAggregateOutputType = {
  id: number | null
  userId: number | null
  roomId: number | null
  content: string | null
  giftType: string | null
  createdAt: Date | null
}

export type GiftMessageCountAggregateOutputType = {
  id: number
  userId: number
  roomId: number
  content: number
  giftType: number
  createdAt: number
  _all: number
}


export type GiftMessageAvgAggregateInputType = {
  id?: true
  userId?: true
  roomId?: true
}

export type GiftMessageSumAggregateInputType = {
  id?: true
  userId?: true
  roomId?: true
}

export type GiftMessageMinAggregateInputType = {
  id?: true
  userId?: true
  roomId?: true
  content?: true
  giftType?: true
  createdAt?: true
}

export type GiftMessageMaxAggregateInputType = {
  id?: true
  userId?: true
  roomId?: true
  content?: true
  giftType?: true
  createdAt?: true
}

export type GiftMessageCountAggregateInputType = {
  id?: true
  userId?: true
  roomId?: true
  content?: true
  giftType?: true
  createdAt?: true
  _all?: true
}

export type GiftMessageAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GiftMessage to aggregate.
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GiftMessages to fetch.
   */
  orderBy?: Prisma.GiftMessageOrderByWithRelationInput | Prisma.GiftMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GiftMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GiftMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GiftMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GiftMessages
  **/
  _count?: true | GiftMessageCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: GiftMessageAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: GiftMessageSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GiftMessageMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GiftMessageMaxAggregateInputType
}

export type GetGiftMessageAggregateType<T extends GiftMessageAggregateArgs> = {
      [P in keyof T & keyof AggregateGiftMessage]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGiftMessage[P]>
    : Prisma.GetScalarType<T[P], AggregateGiftMessage[P]>
}




export type GiftMessageGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GiftMessageWhereInput
  orderBy?: Prisma.GiftMessageOrderByWithAggregationInput | Prisma.GiftMessageOrderByWithAggregationInput[]
  by: Prisma.GiftMessageScalarFieldEnum[] | Prisma.GiftMessageScalarFieldEnum
  having?: Prisma.GiftMessageScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GiftMessageCountAggregateInputType | true
  _avg?: GiftMessageAvgAggregateInputType
  _sum?: GiftMessageSumAggregateInputType
  _min?: GiftMessageMinAggregateInputType
  _max?: GiftMessageMaxAggregateInputType
}

export type GiftMessageGroupByOutputType = {
  id: number
  userId: number
  roomId: number
  content: string
  giftType: string
  createdAt: Date
  _count: GiftMessageCountAggregateOutputType | null
  _avg: GiftMessageAvgAggregateOutputType | null
  _sum: GiftMessageSumAggregateOutputType | null
  _min: GiftMessageMinAggregateOutputType | null
  _max: GiftMessageMaxAggregateOutputType | null
}

type GetGiftMessageGroupByPayload<T extends GiftMessageGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GiftMessageGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GiftMessageGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GiftMessageGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GiftMessageGroupByOutputType[P]>
      }
    >
  >



export type GiftMessageWhereInput = {
  AND?: Prisma.GiftMessageWhereInput | Prisma.GiftMessageWhereInput[]
  OR?: Prisma.GiftMessageWhereInput[]
  NOT?: Prisma.GiftMessageWhereInput | Prisma.GiftMessageWhereInput[]
  id?: Prisma.IntFilter<"GiftMessage"> | number
  userId?: Prisma.IntFilter<"GiftMessage"> | number
  roomId?: Prisma.IntFilter<"GiftMessage"> | number
  content?: Prisma.StringFilter<"GiftMessage"> | string
  giftType?: Prisma.StringFilter<"GiftMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"GiftMessage"> | Date | string
  room?: Prisma.XOR<Prisma.RoomScalarRelationFilter, Prisma.RoomWhereInput>
}

export type GiftMessageOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  giftType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  room?: Prisma.RoomOrderByWithRelationInput
}

export type GiftMessageWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  AND?: Prisma.GiftMessageWhereInput | Prisma.GiftMessageWhereInput[]
  OR?: Prisma.GiftMessageWhereInput[]
  NOT?: Prisma.GiftMessageWhereInput | Prisma.GiftMessageWhereInput[]
  userId?: Prisma.IntFilter<"GiftMessage"> | number
  roomId?: Prisma.IntFilter<"GiftMessage"> | number
  content?: Prisma.StringFilter<"GiftMessage"> | string
  giftType?: Prisma.StringFilter<"GiftMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"GiftMessage"> | Date | string
  room?: Prisma.XOR<Prisma.RoomScalarRelationFilter, Prisma.RoomWhereInput>
}, "id">

export type GiftMessageOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  giftType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  _count?: Prisma.GiftMessageCountOrderByAggregateInput
  _avg?: Prisma.GiftMessageAvgOrderByAggregateInput
  _max?: Prisma.GiftMessageMaxOrderByAggregateInput
  _min?: Prisma.GiftMessageMinOrderByAggregateInput
  _sum?: Prisma.GiftMessageSumOrderByAggregateInput
}

export type GiftMessageScalarWhereWithAggregatesInput = {
  AND?: Prisma.GiftMessageScalarWhereWithAggregatesInput | Prisma.GiftMessageScalarWhereWithAggregatesInput[]
  OR?: Prisma.GiftMessageScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GiftMessageScalarWhereWithAggregatesInput | Prisma.GiftMessageScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"GiftMessage"> | number
  userId?: Prisma.IntWithAggregatesFilter<"GiftMessage"> | number
  roomId?: Prisma.IntWithAggregatesFilter<"GiftMessage"> | number
  content?: Prisma.StringWithAggregatesFilter<"GiftMessage"> | string
  giftType?: Prisma.StringWithAggregatesFilter<"GiftMessage"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GiftMessage"> | Date | string
}

export type GiftMessageCreateInput = {
  userId: number
  content: string
  giftType: string
  createdAt?: Date | string
  room: Prisma.RoomCreateNestedOneWithoutGiftMessagesInput
}

export type GiftMessageUncheckedCreateInput = {
  id?: number
  userId: number
  roomId: number
  content: string
  giftType: string
  createdAt?: Date | string
}

export type GiftMessageUpdateInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  room?: Prisma.RoomUpdateOneRequiredWithoutGiftMessagesNestedInput
}

export type GiftMessageUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  roomId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GiftMessageCreateManyInput = {
  id?: number
  userId: number
  roomId: number
  content: string
  giftType: string
  createdAt?: Date | string
}

export type GiftMessageUpdateManyMutationInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GiftMessageUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  roomId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GiftMessageListRelationFilter = {
  every?: Prisma.GiftMessageWhereInput
  some?: Prisma.GiftMessageWhereInput
  none?: Prisma.GiftMessageWhereInput
}

export type GiftMessageOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GiftMessageCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  giftType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GiftMessageAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
}

export type GiftMessageMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  giftType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GiftMessageMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
  content?: Prisma.SortOrder
  giftType?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
}

export type GiftMessageSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  roomId?: Prisma.SortOrder
}

export type GiftMessageCreateNestedManyWithoutRoomInput = {
  create?: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput> | Prisma.GiftMessageCreateWithoutRoomInput[] | Prisma.GiftMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.GiftMessageCreateOrConnectWithoutRoomInput | Prisma.GiftMessageCreateOrConnectWithoutRoomInput[]
  createMany?: Prisma.GiftMessageCreateManyRoomInputEnvelope
  connect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
}

export type GiftMessageUncheckedCreateNestedManyWithoutRoomInput = {
  create?: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput> | Prisma.GiftMessageCreateWithoutRoomInput[] | Prisma.GiftMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.GiftMessageCreateOrConnectWithoutRoomInput | Prisma.GiftMessageCreateOrConnectWithoutRoomInput[]
  createMany?: Prisma.GiftMessageCreateManyRoomInputEnvelope
  connect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
}

export type GiftMessageUpdateManyWithoutRoomNestedInput = {
  create?: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput> | Prisma.GiftMessageCreateWithoutRoomInput[] | Prisma.GiftMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.GiftMessageCreateOrConnectWithoutRoomInput | Prisma.GiftMessageCreateOrConnectWithoutRoomInput[]
  upsert?: Prisma.GiftMessageUpsertWithWhereUniqueWithoutRoomInput | Prisma.GiftMessageUpsertWithWhereUniqueWithoutRoomInput[]
  createMany?: Prisma.GiftMessageCreateManyRoomInputEnvelope
  set?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  disconnect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  delete?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  connect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  update?: Prisma.GiftMessageUpdateWithWhereUniqueWithoutRoomInput | Prisma.GiftMessageUpdateWithWhereUniqueWithoutRoomInput[]
  updateMany?: Prisma.GiftMessageUpdateManyWithWhereWithoutRoomInput | Prisma.GiftMessageUpdateManyWithWhereWithoutRoomInput[]
  deleteMany?: Prisma.GiftMessageScalarWhereInput | Prisma.GiftMessageScalarWhereInput[]
}

export type GiftMessageUncheckedUpdateManyWithoutRoomNestedInput = {
  create?: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput> | Prisma.GiftMessageCreateWithoutRoomInput[] | Prisma.GiftMessageUncheckedCreateWithoutRoomInput[]
  connectOrCreate?: Prisma.GiftMessageCreateOrConnectWithoutRoomInput | Prisma.GiftMessageCreateOrConnectWithoutRoomInput[]
  upsert?: Prisma.GiftMessageUpsertWithWhereUniqueWithoutRoomInput | Prisma.GiftMessageUpsertWithWhereUniqueWithoutRoomInput[]
  createMany?: Prisma.GiftMessageCreateManyRoomInputEnvelope
  set?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  disconnect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  delete?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  connect?: Prisma.GiftMessageWhereUniqueInput | Prisma.GiftMessageWhereUniqueInput[]
  update?: Prisma.GiftMessageUpdateWithWhereUniqueWithoutRoomInput | Prisma.GiftMessageUpdateWithWhereUniqueWithoutRoomInput[]
  updateMany?: Prisma.GiftMessageUpdateManyWithWhereWithoutRoomInput | Prisma.GiftMessageUpdateManyWithWhereWithoutRoomInput[]
  deleteMany?: Prisma.GiftMessageScalarWhereInput | Prisma.GiftMessageScalarWhereInput[]
}

export type GiftMessageCreateWithoutRoomInput = {
  userId: number
  content: string
  giftType: string
  createdAt?: Date | string
}

export type GiftMessageUncheckedCreateWithoutRoomInput = {
  id?: number
  userId: number
  content: string
  giftType: string
  createdAt?: Date | string
}

export type GiftMessageCreateOrConnectWithoutRoomInput = {
  where: Prisma.GiftMessageWhereUniqueInput
  create: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput>
}

export type GiftMessageCreateManyRoomInputEnvelope = {
  data: Prisma.GiftMessageCreateManyRoomInput | Prisma.GiftMessageCreateManyRoomInput[]
  skipDuplicates?: boolean
}

export type GiftMessageUpsertWithWhereUniqueWithoutRoomInput = {
  where: Prisma.GiftMessageWhereUniqueInput
  update: Prisma.XOR<Prisma.GiftMessageUpdateWithoutRoomInput, Prisma.GiftMessageUncheckedUpdateWithoutRoomInput>
  create: Prisma.XOR<Prisma.GiftMessageCreateWithoutRoomInput, Prisma.GiftMessageUncheckedCreateWithoutRoomInput>
}

export type GiftMessageUpdateWithWhereUniqueWithoutRoomInput = {
  where: Prisma.GiftMessageWhereUniqueInput
  data: Prisma.XOR<Prisma.GiftMessageUpdateWithoutRoomInput, Prisma.GiftMessageUncheckedUpdateWithoutRoomInput>
}

export type GiftMessageUpdateManyWithWhereWithoutRoomInput = {
  where: Prisma.GiftMessageScalarWhereInput
  data: Prisma.XOR<Prisma.GiftMessageUpdateManyMutationInput, Prisma.GiftMessageUncheckedUpdateManyWithoutRoomInput>
}

export type GiftMessageScalarWhereInput = {
  AND?: Prisma.GiftMessageScalarWhereInput | Prisma.GiftMessageScalarWhereInput[]
  OR?: Prisma.GiftMessageScalarWhereInput[]
  NOT?: Prisma.GiftMessageScalarWhereInput | Prisma.GiftMessageScalarWhereInput[]
  id?: Prisma.IntFilter<"GiftMessage"> | number
  userId?: Prisma.IntFilter<"GiftMessage"> | number
  roomId?: Prisma.IntFilter<"GiftMessage"> | number
  content?: Prisma.StringFilter<"GiftMessage"> | string
  giftType?: Prisma.StringFilter<"GiftMessage"> | string
  createdAt?: Prisma.DateTimeFilter<"GiftMessage"> | Date | string
}

export type GiftMessageCreateManyRoomInput = {
  id?: number
  userId: number
  content: string
  giftType: string
  createdAt?: Date | string
}

export type GiftMessageUpdateWithoutRoomInput = {
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GiftMessageUncheckedUpdateWithoutRoomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GiftMessageUncheckedUpdateManyWithoutRoomInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  userId?: Prisma.IntFieldUpdateOperationsInput | number
  content?: Prisma.StringFieldUpdateOperationsInput | string
  giftType?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type GiftMessageSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roomId?: boolean
  content?: boolean
  giftType?: boolean
  createdAt?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["giftMessage"]>

export type GiftMessageSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roomId?: boolean
  content?: boolean
  giftType?: boolean
  createdAt?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["giftMessage"]>

export type GiftMessageSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  roomId?: boolean
  content?: boolean
  giftType?: boolean
  createdAt?: boolean
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}, ExtArgs["result"]["giftMessage"]>

export type GiftMessageSelectScalar = {
  id?: boolean
  userId?: boolean
  roomId?: boolean
  content?: boolean
  giftType?: boolean
  createdAt?: boolean
}

export type GiftMessageOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "roomId" | "content" | "giftType" | "createdAt", ExtArgs["result"]["giftMessage"]>
export type GiftMessageInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}
export type GiftMessageIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}
export type GiftMessageIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  room?: boolean | Prisma.RoomDefaultArgs<ExtArgs>
}

export type $GiftMessagePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GiftMessage"
  objects: {
    room: Prisma.$RoomPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    userId: number
    roomId: number
    content: string
    giftType: string
    createdAt: Date
  }, ExtArgs["result"]["giftMessage"]>
  composites: {}
}

export type GiftMessageGetPayload<S extends boolean | null | undefined | GiftMessageDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload, S>

export type GiftMessageCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GiftMessageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GiftMessageCountAggregateInputType | true
  }

export interface GiftMessageDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GiftMessage'], meta: { name: 'GiftMessage' } }
  /**
   * Find zero or one GiftMessage that matches the filter.
   * @param {GiftMessageFindUniqueArgs} args - Arguments to find a GiftMessage
   * @example
   * // Get one GiftMessage
   * const giftMessage = await prisma.giftMessage.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GiftMessageFindUniqueArgs>(args: Prisma.SelectSubset<T, GiftMessageFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GiftMessage that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GiftMessageFindUniqueOrThrowArgs} args - Arguments to find a GiftMessage
   * @example
   * // Get one GiftMessage
   * const giftMessage = await prisma.giftMessage.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GiftMessageFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GiftMessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GiftMessage that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageFindFirstArgs} args - Arguments to find a GiftMessage
   * @example
   * // Get one GiftMessage
   * const giftMessage = await prisma.giftMessage.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GiftMessageFindFirstArgs>(args?: Prisma.SelectSubset<T, GiftMessageFindFirstArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GiftMessage that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageFindFirstOrThrowArgs} args - Arguments to find a GiftMessage
   * @example
   * // Get one GiftMessage
   * const giftMessage = await prisma.giftMessage.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GiftMessageFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GiftMessageFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GiftMessages that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GiftMessages
   * const giftMessages = await prisma.giftMessage.findMany()
   * 
   * // Get first 10 GiftMessages
   * const giftMessages = await prisma.giftMessage.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const giftMessageWithIdOnly = await prisma.giftMessage.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GiftMessageFindManyArgs>(args?: Prisma.SelectSubset<T, GiftMessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GiftMessage.
   * @param {GiftMessageCreateArgs} args - Arguments to create a GiftMessage.
   * @example
   * // Create one GiftMessage
   * const GiftMessage = await prisma.giftMessage.create({
   *   data: {
   *     // ... data to create a GiftMessage
   *   }
   * })
   * 
   */
  create<T extends GiftMessageCreateArgs>(args: Prisma.SelectSubset<T, GiftMessageCreateArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GiftMessages.
   * @param {GiftMessageCreateManyArgs} args - Arguments to create many GiftMessages.
   * @example
   * // Create many GiftMessages
   * const giftMessage = await prisma.giftMessage.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GiftMessageCreateManyArgs>(args?: Prisma.SelectSubset<T, GiftMessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GiftMessages and returns the data saved in the database.
   * @param {GiftMessageCreateManyAndReturnArgs} args - Arguments to create many GiftMessages.
   * @example
   * // Create many GiftMessages
   * const giftMessage = await prisma.giftMessage.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GiftMessages and only return the `id`
   * const giftMessageWithIdOnly = await prisma.giftMessage.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GiftMessageCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GiftMessageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GiftMessage.
   * @param {GiftMessageDeleteArgs} args - Arguments to delete one GiftMessage.
   * @example
   * // Delete one GiftMessage
   * const GiftMessage = await prisma.giftMessage.delete({
   *   where: {
   *     // ... filter to delete one GiftMessage
   *   }
   * })
   * 
   */
  delete<T extends GiftMessageDeleteArgs>(args: Prisma.SelectSubset<T, GiftMessageDeleteArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GiftMessage.
   * @param {GiftMessageUpdateArgs} args - Arguments to update one GiftMessage.
   * @example
   * // Update one GiftMessage
   * const giftMessage = await prisma.giftMessage.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GiftMessageUpdateArgs>(args: Prisma.SelectSubset<T, GiftMessageUpdateArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GiftMessages.
   * @param {GiftMessageDeleteManyArgs} args - Arguments to filter GiftMessages to delete.
   * @example
   * // Delete a few GiftMessages
   * const { count } = await prisma.giftMessage.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GiftMessageDeleteManyArgs>(args?: Prisma.SelectSubset<T, GiftMessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GiftMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GiftMessages
   * const giftMessage = await prisma.giftMessage.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GiftMessageUpdateManyArgs>(args: Prisma.SelectSubset<T, GiftMessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GiftMessages and returns the data updated in the database.
   * @param {GiftMessageUpdateManyAndReturnArgs} args - Arguments to update many GiftMessages.
   * @example
   * // Update many GiftMessages
   * const giftMessage = await prisma.giftMessage.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GiftMessages and only return the `id`
   * const giftMessageWithIdOnly = await prisma.giftMessage.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GiftMessageUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GiftMessageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GiftMessage.
   * @param {GiftMessageUpsertArgs} args - Arguments to update or create a GiftMessage.
   * @example
   * // Update or create a GiftMessage
   * const giftMessage = await prisma.giftMessage.upsert({
   *   create: {
   *     // ... data to create a GiftMessage
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GiftMessage we want to update
   *   }
   * })
   */
  upsert<T extends GiftMessageUpsertArgs>(args: Prisma.SelectSubset<T, GiftMessageUpsertArgs<ExtArgs>>): Prisma.Prisma__GiftMessageClient<runtime.Types.Result.GetResult<Prisma.$GiftMessagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GiftMessages.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageCountArgs} args - Arguments to filter GiftMessages to count.
   * @example
   * // Count the number of GiftMessages
   * const count = await prisma.giftMessage.count({
   *   where: {
   *     // ... the filter for the GiftMessages we want to count
   *   }
   * })
  **/
  count<T extends GiftMessageCountArgs>(
    args?: Prisma.Subset<T, GiftMessageCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GiftMessageCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GiftMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GiftMessageAggregateArgs>(args: Prisma.Subset<T, GiftMessageAggregateArgs>): Prisma.PrismaPromise<GetGiftMessageAggregateType<T>>

  /**
   * Group by GiftMessage.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GiftMessageGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GiftMessageGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GiftMessageGroupByArgs['orderBy'] }
      : { orderBy?: GiftMessageGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GiftMessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGiftMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GiftMessage model
 */
readonly fields: GiftMessageFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GiftMessage.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GiftMessageClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  room<T extends Prisma.RoomDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.RoomDefaultArgs<ExtArgs>>): Prisma.Prisma__RoomClient<runtime.Types.Result.GetResult<Prisma.$RoomPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GiftMessage model
 */
export interface GiftMessageFieldRefs {
  readonly id: Prisma.FieldRef<"GiftMessage", 'Int'>
  readonly userId: Prisma.FieldRef<"GiftMessage", 'Int'>
  readonly roomId: Prisma.FieldRef<"GiftMessage", 'Int'>
  readonly content: Prisma.FieldRef<"GiftMessage", 'String'>
  readonly giftType: Prisma.FieldRef<"GiftMessage", 'String'>
  readonly createdAt: Prisma.FieldRef<"GiftMessage", 'DateTime'>
}
    

// Custom InputTypes
/**
 * GiftMessage findUnique
 */
export type GiftMessageFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter, which GiftMessage to fetch.
   */
  where: Prisma.GiftMessageWhereUniqueInput
}

/**
 * GiftMessage findUniqueOrThrow
 */
export type GiftMessageFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter, which GiftMessage to fetch.
   */
  where: Prisma.GiftMessageWhereUniqueInput
}

/**
 * GiftMessage findFirst
 */
export type GiftMessageFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter, which GiftMessage to fetch.
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GiftMessages to fetch.
   */
  orderBy?: Prisma.GiftMessageOrderByWithRelationInput | Prisma.GiftMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GiftMessages.
   */
  cursor?: Prisma.GiftMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GiftMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GiftMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GiftMessages.
   */
  distinct?: Prisma.GiftMessageScalarFieldEnum | Prisma.GiftMessageScalarFieldEnum[]
}

/**
 * GiftMessage findFirstOrThrow
 */
export type GiftMessageFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter, which GiftMessage to fetch.
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GiftMessages to fetch.
   */
  orderBy?: Prisma.GiftMessageOrderByWithRelationInput | Prisma.GiftMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GiftMessages.
   */
  cursor?: Prisma.GiftMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GiftMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GiftMessages.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GiftMessages.
   */
  distinct?: Prisma.GiftMessageScalarFieldEnum | Prisma.GiftMessageScalarFieldEnum[]
}

/**
 * GiftMessage findMany
 */
export type GiftMessageFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter, which GiftMessages to fetch.
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GiftMessages to fetch.
   */
  orderBy?: Prisma.GiftMessageOrderByWithRelationInput | Prisma.GiftMessageOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GiftMessages.
   */
  cursor?: Prisma.GiftMessageWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GiftMessages from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GiftMessages.
   */
  skip?: number
  distinct?: Prisma.GiftMessageScalarFieldEnum | Prisma.GiftMessageScalarFieldEnum[]
}

/**
 * GiftMessage create
 */
export type GiftMessageCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * The data needed to create a GiftMessage.
   */
  data: Prisma.XOR<Prisma.GiftMessageCreateInput, Prisma.GiftMessageUncheckedCreateInput>
}

/**
 * GiftMessage createMany
 */
export type GiftMessageCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GiftMessages.
   */
  data: Prisma.GiftMessageCreateManyInput | Prisma.GiftMessageCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GiftMessage createManyAndReturn
 */
export type GiftMessageCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * The data used to create many GiftMessages.
   */
  data: Prisma.GiftMessageCreateManyInput | Prisma.GiftMessageCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GiftMessage update
 */
export type GiftMessageUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * The data needed to update a GiftMessage.
   */
  data: Prisma.XOR<Prisma.GiftMessageUpdateInput, Prisma.GiftMessageUncheckedUpdateInput>
  /**
   * Choose, which GiftMessage to update.
   */
  where: Prisma.GiftMessageWhereUniqueInput
}

/**
 * GiftMessage updateMany
 */
export type GiftMessageUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GiftMessages.
   */
  data: Prisma.XOR<Prisma.GiftMessageUpdateManyMutationInput, Prisma.GiftMessageUncheckedUpdateManyInput>
  /**
   * Filter which GiftMessages to update
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * Limit how many GiftMessages to update.
   */
  limit?: number
}

/**
 * GiftMessage updateManyAndReturn
 */
export type GiftMessageUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * The data used to update GiftMessages.
   */
  data: Prisma.XOR<Prisma.GiftMessageUpdateManyMutationInput, Prisma.GiftMessageUncheckedUpdateManyInput>
  /**
   * Filter which GiftMessages to update
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * Limit how many GiftMessages to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GiftMessage upsert
 */
export type GiftMessageUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * The filter to search for the GiftMessage to update in case it exists.
   */
  where: Prisma.GiftMessageWhereUniqueInput
  /**
   * In case the GiftMessage found by the `where` argument doesn't exist, create a new GiftMessage with this data.
   */
  create: Prisma.XOR<Prisma.GiftMessageCreateInput, Prisma.GiftMessageUncheckedCreateInput>
  /**
   * In case the GiftMessage was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GiftMessageUpdateInput, Prisma.GiftMessageUncheckedUpdateInput>
}

/**
 * GiftMessage delete
 */
export type GiftMessageDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
  /**
   * Filter which GiftMessage to delete.
   */
  where: Prisma.GiftMessageWhereUniqueInput
}

/**
 * GiftMessage deleteMany
 */
export type GiftMessageDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GiftMessages to delete
   */
  where?: Prisma.GiftMessageWhereInput
  /**
   * Limit how many GiftMessages to delete.
   */
  limit?: number
}

/**
 * GiftMessage without action
 */
export type GiftMessageDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GiftMessage
   */
  select?: Prisma.GiftMessageSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GiftMessage
   */
  omit?: Prisma.GiftMessageOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GiftMessageInclude<ExtArgs> | null
}
